const { WAConnection: _WAConnection, MessageType, Presence, mentionedJid } = require('@adiwajshing/baileys');  const simple = require('./lib/simple');    const WAConnection = simple.WAConnection(_WAConnection);      const fs = require('fs-extra');        const ms = require('parse-ms');          const figlet = require('figlet');            const chalk = require('chalk');              const { color, bgcolor } = require('./lib/color');                const { start, success, close, info } = require('./lib/functions');                  const setting = JSON.parse(fs.readFileSync('./settings.json'));                    const welcome = require('./message/group');baterai = 'Not Detect'isCharge = 'Not Detect'blocked = []const sleep = async (ms) => {	return new Promise(resolve => setTimeout(resolve, ms))	}require('./Layna.js')nocache('./Layna.js', module => console.log(color(`${module} is now update!`,'greenyellow')))const starts = async (nayla = new WAConnection()) => {	nayla.logger.level = 'warn'	nayla.version = [2, 2140, 12]	console.log('Starting bot...')	console.log(color(figlet.textSync('GG Bot', {font: 'Standard',horizontalLayout: 'default',vertivalLayout: 'default',width: 80,whitespaceBreak: false}), 'cyan'))nayla.on('qr', qr => {console.log(color('[','white'), color('!','red'), color(']','white'), color('QR nya Om'))})fs.existsSync('./session.json') && nayla.loadAuthInfo('./session.json')nayla.on('connecting', () => {})nayla.on('open', () => {})await nayla.connect({timeoutMs: 30 * 1000})fs.writeFileSync('./session.json', JSON.stringify(nayla.base64EncodedAuthInfo(), null, '\t'))console.log(']', color('----------------', 'purple'), color(' CONNECTED ', 'green'), color('----------------', 'purple'), '[\n\n')console.log('[', color('÷', 'red'), ']', color('Wa Version', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.wa_version}`)console.log('[', color('÷', 'red'), ']', color('Os Version', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.os_version}`)console.log('[', color('÷', 'red'), ']', color('Device', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.device_manufacturer}`)console.log('[', color('÷', 'red'), ']', color('Model', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.device_model}`)console.log('[', color('÷', 'red'), ']', color('MCC', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.mcc}`)console.log('[', color('÷', 'red'), ']', color('MNC', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.mnc}`)console.log('[', color('÷', 'red'), ']', color('Os Build Number', 'yellow'), color(':', 'aqua'), `${nayla.user.phone.os_build_number}`)console.log('\n\n]', color('----------------', 'purple'), color(' GG-BOT ', 'green'), color('----------------', 'purple'), '[')console.log(color('PESAN :', 'silver'))nayla.on('ws-close', () => {console.log(color('[ SYSTEM ]', 'red'), color('Koneksi terputus, mencoba menghubungkan kembali..', 'yellow'))})nayla.on('close', async ({ reason, isReconnecting }) => {console.log(color('[ SYSTEM ]', 'red'), color('Terputus, Alasan :' + reason + '\nMencoba mengkoneksi ulang :' + isReconnecting, 'yellow'))if (!isReconnecting) {console.log(color('[ SYSTEM ]', 'red'), color('Connect To Phone Rejected and Shutting Down.', 'yellow'))}})       nayla.on ('CB:action,,battery', json => {            var batteryLevelStr = json[2][0][1].value;            var batterylevel = parseInt(batteryLevelStr);            global.baterai = batterylevel + "%";            global.isCharge = json[2][0][1].live;            console.log(chalk.keyword('orange')('     Battery : ' + baterai + ''), chalk.keyword('salmon')(', Charge :' + isCharge + ''));        }); nayla.on('chat-update', async (mek) => {	 require('./Layna.js')(nayla, mek)	 });	nayla.on('group-participants-update', async (anu) => {await welcome(nayla, anu)});nayla.on('CB:action,,call', async json => {	const callerId = json[2][0][1].fromnayla.sendMessage(callerId, `「 *CALL DETECTED* 」\n\nMaaf, Kamu Telah Melanggar Rules Bot\n\nAuto Block System ~`, MessageType.text)nayla.sendMessage(`${setting.nomerowner}@s.whatsapp.net`, `*◯ PANGGILAN ◯*\n\nCalling Detected From @${callerId.split("@")[0]} >_<`, MessageType.text, { contextInfo: {"mentionedJid": [callerId]}})await sleep(4000)await nayla.blockUser(callerId, "add")})nayla.on('CB:Blocklist', json => {if (blocked.length > 2) returnfor (let i of json[1].blocklist) {blocked.push(i.replace('c.us','s.whatsapp.net'))}})}function nocache(module, cb = () => { }) {	console.log(color('MODULE','white'), color(`'${module}'`,'greenyellow'))fs.watchFile(require.resolve(module), async () => {await uncache(require.resolve(module))cb(module)})}function uncache(module = '.') {	return new Promise((resolve, reject) => {try {delete require.cache[require.resolve(module)]resolve()} catch (e) {reject(e)}})}starts()